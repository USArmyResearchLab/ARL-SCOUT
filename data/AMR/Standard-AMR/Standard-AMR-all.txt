# ::id p1.09_main1_s92
# ::tok can you go around and take a photo behind the tv
# ::snt can you go around and take a photo behind the tv
(a / and
	:op1 (g / go-02
		:ARG0 (y / you)
		:mode imperative
		:path (a2 / around)
		:polite +)
	:op2 (p / photograph-01
		:ARG0 y
		:location (b / behind
			:op1 (t / television))
		:mode imperative
		:polite +))

# ::id p1.09_main1_s93
# ::tok please and thank you
# ::snt please and thank you
(a / and
	:op1 (e / event
		:mode imperative
		:polite +)
	:op2 (t / thank-01
		:ARG0 (i / i)
		:ARG1 (y / you)))

# ::id p1.09_main1_s94
# ::tok No . My LIDAR map is showing no space behind the TV . Do you want me to move around the left or right side of the TV ?
# ::snt No. My LIDAR map is showing no space behind the TV. Do you want me to move around the left or right side of the TV?
(m / multi-sentence
	:snt1 (n / no)
	:snt2 (s / show-01
		:ARG0 (m2 / map
			:mod (l / lidar)
			:poss (i / i))
		:ARG1 (s2 / space
			:location (b / behind
				:op1 (t / television))
			:polarity -))
	:snt3 (w / want-01
		:ARG0 (y / you)
		:ARG1 (m3 / move-01
			:ARG0 i
			:ARG1 i
			:ARG2 (o / or
				:op1 (s3 / side
					:ARG1-of (l2 / left-20
						:ARG2 t))
				:op2 (s4 / side
					:ARG1-of (r / right-04
						:ARG2 t)))
			:direction (a / around))
		:polarity (a2 / amr-unknown)))

# ::id p1.09_main1_s95
# ::tok < no speech >
# ::snt <no speech>
(a / amr-empty)

# ::id p1.09_main1_s96
# ::tok no if you can just back up to the entryway of that room
# ::snt no if you can just back up to the entryway of that room
(m / multi-sentence
	:snt1 (n / no)
	:snt2 (b / back-up-06
		:ARG0 (y / you)
		:ARG1 y
		:destination (e / entryway
			:part-of (r / room
				:mod (t / that)))
		:mod (j / just)
		:mode imperative
		:polite +))

# ::id p1.09_main1_s97
# ::tok take a photo
# ::snt take a photo
(p / photograph-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p1.09_main1_s98
# ::tok and then go into the other entryway on the left side of that room
# ::snt and then go into the other entryway on the left side of that room
(a / and
	:op2 (g / go-02
		:ARG0 (y / you)
		:ARG4 (e / entryway
			:location (s / side
				:ARG1-of (l / left-20)
				:part-of (r / room
					:mod (t / that)))
			:mod (o / other))
		:mode imperative
		:time (t2 / then)))

# ::id p1.09_main1_s99
# ::tok and take a photo in front and behind you
# ::snt and take a photo in front and behind you
(a / and
	:op2 (p / photograph-01
		:ARG0 (y / you)
		:location (a2 / and
			:op1 (i / in-front-of
				:op1 y)
			:op2 (b / behind
				:op1 y))
		:mode imperative))

# ::id p1.09_main1_s100
# ::tok back up to entry way of room , photo , move to door currently to your left , then send photo , turn 180 , send photo
# ::snt back up to entry way of room, photo, move to door currently to your left, then send photo, turn 180, send photo
(a / and
	:op1 (b / back-up-06
		:ARG0 (y / you)
		:ARG1 y
		:destination (e / entryway
			:part-of (r / room))
		:mode imperative)
	:op2 (p / photograph-01
		:ARG0 y
		:mode imperative)
	:op3 (m / move-01
		:ARG0 y
		:ARG1 y
		:ARG2 (d / door
			:ARG1-of (l / left-20
				:ARG2 y
				:time (c / current)))
		:mode imperative)
	:op4 (s / send-01
		:ARG0 y
		:ARG1 (p2 / photo)
		:mode imperative
		:time (t / then))
	:op5 (t2 / turn-01
		:ARG0 y
		:ARG1 y
		:extent (a2 / angle-quantity
			:quant 180
			:unit (d2 / degree))
		:mode imperative)
	:op6 (s2 / send-01
		:ARG0 y
		:ARG1 (p3 / photo)
		:mode imperative))

# ::id p1.09_main1_s101
# ::tok executing ...
# ::snt executing...
(e / execute-02
	:ARG0 (i / i))

# ::id p1.09_main1_s102
# ::tok nope stop stop
# ::snt nope stop stop
(m / multi-sentence
	:snt1 (n / nope)
	:snt2 (s / stop-01
		:ARG0 (y / you)
		:ARG1 y
		:mode imperative)
	:snt3 (s2 / stop-01
		:ARG0 y
		:ARG1 y
		:mode imperative))

# ::id p1.09_main1_s103
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p1.09_main1_s104
# ::tok < unintelligible >
# ::snt <unintelligible>
(a / amr-empty)

# ::id p1.09_main1_s105
# ::tok back up into that hallway
# ::snt back up into that hallway
(b / back-up-06
	:ARG0 (y / you)
	:ARG1 y
	:destination (h / hallway
		:mod (t / that))
	:mode imperative)

# ::id p1.09_main1_s106
# ::tok Did I misunderstand ?
# ::snt Did I misunderstand?
(m / misunderstand-01
	:ARG0 (i / i)
	:polarity (a / amr-unknown))

# ::id p1.09_main1_s107
# ::tok How far should I back up ? Until I reach the wall behind me ?
# ::snt How far should I back up? Until I reach the wall behind me?
(m / multi-sentence
	:snt1 (r2 / recommend-01
		:ARG1 (b3 / back-up-06
			:ARG0 i
			:ARG1 i
			:extent (a2 / amr-unknown)))
	:snt2 (b / back-up-06
		:ARG0 (i / i)
		:ARG1 i
		:destination (r / reach-01
			:ARG0 i
			:ARG1 (w / wall
				:location (b2 / behind
					:op1 i)))
		:polarity (a / amr-unknown)))

# ::id p1.09_main1_s108
# ::tok yes
# ::snt yes
(y / yes)

# ::id p1.09_main1_s109
# ::tok back up into hallway until you reach the wall behind you
# ::snt back up into hallway until you reach the wall behind you
(b / back-up-06
	:ARG0 (y / you)
	:ARG1 y
	:destination (r / reach-01
		:ARG0 y
		:ARG1 (w / wall
			:location (b2 / behind
				:op1 y)))
	:mode imperative
	:path (h / hallway))

# ::id p1.09_main1_s110
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p1.09_main1_s111
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p1.05_train_s12
# ::tok < pause > trying to find out the number of doorways
# ::snt <pause> trying to find out the number of doorways
(t / try-01
	:ARG0 (i / i)
	:ARG1 (f / find-out-03
		:ARG0 i
		:ARG1 (n / number
			:quant-of (d / doorway))))

# ::id p1.05_train_s13
# ::tok I think that you are more familiar with doorways than I am , but you can tell me to move to any object or part of the building you can see .
# ::snt I think that you are more familiar with doorways than I am, but you can tell me to move to any object or part of the building you can see.
(c / contrast-01
	:ARG1 (t / think-01
		:ARG0 (i / i)
		:ARG1 (h / have-degree-91
			:ARG1 (y / you)
			:ARG2 (f / familiarize-01
				:ARG1 y
				:ARG2 (d / doorway))
			:ARG3 (m / more)
			:ARG4 i))
	:ARG2 (p / possible-01
		:ARG1 (t2 / tell-01
			:ARG0 y
			:ARG1 (m2 / move-01
				:ARG0 i
				:ARG1 i
				:ARG2 (o / or
					:ARG1-of (s / see-01
						:ARG0 y
						:ARG1-of (p3 / possible-01))
					:op1 (o2 / object
						:mod (a / any))
					:op2 (p2 / part
						:part-of (b / building))))
			:ARG2 i)))

# ::id p1.05_train_s14
# ::tok move to the end of the hallway
# ::snt move to the end of the hallway
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (e / end
		:part-of (h / hallway))
	:mode imperative)

# ::id p1.05_train_s15
# ::tok move to the end of the hallway
# ::snt move to the end of the hallway
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (e / end
		:part-of (h / hallway))
	:mode imperative)

# ::id p1.05_train_s16
# ::tok executing ...
# ::snt executing...
(e / execute-02
	:ARG0 (i / i))

# ::id p1.05_train_s17
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p1.05_train_s18
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p1.05_train_s19
# ::tok take another picture
# ::snt take another picture
(p / picture-01
	:ARG0 (y / you)
	:mod (a / another)
	:mode imperative)

# ::id p1.05_train_s20
# ::tok image
# ::snt image
(i / image-101
	:ARG0 (y / you)
	:mode imperative)

# ::id p1.05_train_s21
# ::tok image sent
# ::snt image sent
(s / send-01
	:ARG0 (i / i)
	:ARG1 (i2 / image))

# ::id p1.05_train_s22
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p1.07_main2_s50
# ::tok back up eleven feet
# ::snt back up eleven feet
(b / back-up-06
	:ARG0 (y / you)
	:ARG1 y
	:extent (d / distance-quantity
		:quant 11
		:unit (f / foot))
	:mode imperative)

# ::id p1.07_main2_s51
# ::tok and then turn forty five degrees to your right
# ::snt and then turn forty five degrees to your right
(a / and
	:op2 (t / turn-01
		:ARG0 (y / you)
		:ARG1 y
		:direction (r / right-04
			:ARG2 y)
		:extent (a2 / angle-quantity
			:quant 45
			:unit (d / degree))
		:mode imperative
		:time (t2 / then)))

# ::id p1.07_main2_s52
# ::tok and take a photo
# ::snt and take a photo
(a / and
	:op2 (p / photograph-01
		:ARG0 (y / you)
		:mode imperative))

# ::id p1.07_main2_s53
# ::tok back up 11 feet , turn 45 right , image
# ::snt back up 11 feet, turn 45 right, image
(a / and
	:op1 (b / back-up-06
		:ARG0 (y / you)
		:ARG1 y
		:extent (d / distance-quantity
			:quant 11
			:unit (f / foot))
		:mode imperative)
	:op2 (t / turn-01
		:ARG0 y
		:ARG1 y
		:direction (r / right-04
			:ARG2 y)
		:extent (a2 / angle-quantity
			:quant 45
			:unit (d2 / degree))
		:mode imperative)
	:op3 (i / image-101
		:ARG0 y
		:mode imperative))

# ::id p1.07_main2_s54
# ::tok executing ...
# ::snt executing...
(e / execute-02
	:ARG0 (i / i))

# ::id p1.07_main2_s55
# ::tok image sent
# ::snt image sent
(s / send-01
	:ARG0 (i / i)
	:ARG1 (i2 / image))

# ::id p1.07_main2_s56
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p1.04_main1_s39
# ::tok move forward till you reach the wall
# ::snt move forward till you reach the wall
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (r / reach-01
		:ARG0 y
		:ARG1 (w / wall))
	:direction (f / forward)
	:mode imperative)

# ::id p1.04_main1_s40
# ::tok then turn ninety degrees right
# ::snt then turn ninety degrees right
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative
	:time (t2 / then))

# ::id p1.04_main1_s41
# ::tok send picture
# ::snt send picture
(s / send-01
	:ARG0 (y / you)
	:ARG1 (p / picture)
	:mode imperative)

# ::id p1.04_main1_s42
# ::tok I see a few walls . Which wall should I move to ?
# ::snt I see a few walls. Which wall should I move to?
(m / multi-sentence
	:snt1 (s / see-01
		:ARG0 (i / i)
		:ARG1 (w / wall
			:quant (f / few)))
	:snt2 (r / recommend-01
		:ARG1 (m2 / move-01
			:ARG0 i
			:ARG1 i
			:ARG2 (a / amr-unknown
				:domain w))))

# ::id p1.04_main1_s43
# ::tok the wall straight ahead
# ::snt the wall straight ahead
(w / wall
	:location (a / ahead
		:ARG1-of (s / straight-04)))

# ::id p1.04_main1_s44
# ::tok Move to the wall directly ahead of you
# ::snt Move to the wall directly ahead of you
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (w / wall
		:location (a / ahead
			:ARG1-of (d / direct-02)
			:op1 y))
	:mode imperative)

# ::id p1.04_main1_s45
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p1.04_main1_s46
# ::tok I 'm moving to the wall ahead of me . Then what ?
# ::snt I'm moving to the wall ahead of me. Then what?
(m / multi-sentence
	:snt1 (m2 / move-01
		:ARG0 (i / i)
		:ARG1 i
		:ARG2 (w / wall
			:location (a / ahead
				:op1 i)))
	:snt2 (a2 / amr-unknown
		:time (t / then)))

# ::id p1.04_main1_s47
# ::tok turn right ninety degrees
# ::snt turn right ninety degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p1.04_main1_s48
# ::tok send picture
# ::snt send picture
(s / send-01
	:ARG0 (y / you)
	:ARG1 (p / picture)
	:mode imperative)

# ::id p1.04_main1_s49
# ::tok turn right 90 , image
# ::snt turn right 90, image
(a / and
	:op1 (t / turn-01
		:ARG0 (y / you)
		:ARG1 y
		:direction (r / right-04
			:ARG2 y)
		:extent (a2 / angle-quantity
			:quant 90
			:unit (d / degree))
		:mode imperative)
	:op2 (i / image-101
		:ARG0 y
		:mode imperative))

# ::id p1.04_main1_s50
# ::tok executing ...
# ::snt executing...
(e / execute-02
	:ARG0 (i / i))

# ::id p1.04_main1_s51
# ::tok image sent
# ::snt image sent
(s / send-01
	:ARG0 (i / i)
	:ARG1 (i2 / image))

# ::id p1.04_main1_s52
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.02_train_s166
# ::tok can you turn at least maybe ten more degrees to your left
# ::snt can you turn at least maybe ten more degrees to your left
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / at-least
		:op1 (a2 / angle-quantity
			:mod (m / more)
			:quant 10
			:unit (d / degree)))
	:mode imperative
	:polite +)

# ::id p2.02_train_s167
# ::tok ok , I think I got it .
# ::snt ok, I think I got it.
(m / multi-sentence
	:snt1 (o / okay-04)
	:snt2 (t / think-01
		:ARG0 (i / i)
		:ARG1 (g / get-30
			:ARG0 i
			:ARG1 (i2 / it))))

# ::id p2.02_train_s168
# ::tok turn left 10 degrees
# ::snt turn left 10 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 10
		:unit (d / degree))
	:mode imperative)

# ::id p2.02_train_s169
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_train_s170
# ::tok I will turn left 10 degrees
# ::snt I will turn left 10 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (l / left-20
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 10
		:unit (d / degree)))

# ::id p2.02_train_s171
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_train_s172
# ::tok can you send me another photo
# ::snt can you send me another photo
(s / send-01
	:ARG0 (y / you)
	:ARG1 (p / photo
		:mod (a / another))
	:ARG2 (i / i)
	:mode imperative
	:polite +)

# ::id p2.02_train_s173
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.02_train_s174
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.02_train_s175
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.07_main2_s44
# ::tok turn right ninety degrees
# ::snt turn right ninety degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.07_main2_s45
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.07_main2_s46
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.07_main2_s47
# ::tok I will turn right 90 degrees
# ::snt I will turn right 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p2.07_main2_s48
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.07_main2_s49
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.07_main2_s50
# ::tok move five feet down the hallway on your right
# ::snt move five feet down the hallway on your right
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative
	:path (h / hallway
		:ARG1-of (r / right-04
			:ARG2 y)))

# ::id p2.07_main2_s51
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.07_main2_s52
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.07_main2_s53
# ::tok move into TV hallway
# ::snt move into TV hallway
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (h / hallway
		:name (n / name
			:op1 "TV"))
	:mode imperative)

# ::id p2.07_main2_s54
# ::tok then . . .
# ::snt then. . .
(b / be-temporally-at-91
	:ARG2 (t / then))

# ::id p2.07_main2_s55
# ::tok turn to face East
# ::snt turn to face East
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:destination (f / face-01
		:ARG0 y
		:ARG1 (e / east))
	:mode imperative)

# ::id p2.07_main2_s56
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.07_main2_s57
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p2.07_main2_s58
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.07_main2_s59
# ::tok stop there
# ::snt stop there
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:location (t / there)
	:mode imperative)

# ::id p2.07_main2_s60
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p2.07_main2_s61
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.07_main2_s62
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p2.07_main2_s63
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.07_main2_s64
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.07_main2_s65
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.07_main2_s66
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.03_main1_s72
# ::tok robot < pause > face north
# ::snt robot <pause> face north
(s / say-01
	:ARG0 (i / i)
	:ARG1 (f / face-01
		:ARG0 (y / you
			:name (n2 / name
				:op1 "Robot"))
		:ARG1 (n / north)
		:mode imperative)
	:ARG2 y)

# ::id p2.03_main1_s73
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p2.03_main1_s74
# ::tok face < pause > south
# ::snt face <pause> south
(f / face-01
	:ARG0 (y / you)
	:ARG1 (s / south)
	:mode imperative)

# ::id p2.03_main1_s75
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p2.03_main1_s76
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.03_main1_s77
# ::tok turn to face North
# ::snt turn to face North
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:destination (f / face-01
		:ARG0 y
		:ARG1 (n / north))
	:mode imperative)

# ::id p2.03_main1_s78
# ::tok I will turn to face North
# ::snt I will turn to face North
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:destination (f / face-01
		:ARG0 i
		:ARG1 (n / north)))

# ::id p2.03_main1_s79
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.03_main1_s80
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.03_main1_s81
# ::tok I will send a picture
# ::snt I will send a picture
(s / send-01
	:ARG0 (i / i)
	:ARG1 (p / picture))

# ::id p2.03_main1_s82
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.03_main1_s83
# ::tok turn to face South
# ::snt turn to face South
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:destination (f / face-01
		:ARG0 y
		:ARG1 (s / south))
	:mode imperative)

# ::id p2.03_main1_s84
# ::tok I will turn to face South
# ::snt I will turn to face South
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:destination (f / face-01
		:ARG0 i
		:ARG1 (s / south)))

# ::id p2.03_main1_s85
# ::tok and . . .
# ::snt and. . .
(a / and)

# ::id p2.03_main1_s86
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.03_main1_s87
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.03_main1_s88
# ::tok I will send a picture
# ::snt I will send a picture
(s / send-01
	:ARG0 (i / i)
	:ARG1 (p / picture))

# ::id p2.03_main1_s89
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.03_main1_s90
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.03_main1_s91
# ::tok alright done and sent
# ::snt alright done and sent
(m / multi-sentence
	:snt1 (a / all-right)
	:snt2 (a2 / and
		:op1 (d / do-02
			:ARG0 (i / i))
		:op2 (s / send-01
			:ARG0 i)))

# ::id p2.03_main1_s92
# ::tok done , sent
# ::snt done, sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.03_main1_s93
# ::tok robot what is in front of me
# ::snt robot what is in front of me
(s / say-01
	:ARG0 (i / i)
	:ARG1 (a / amr-unknown
		:location (i2 / in-front-of
			:op1 i))
	:ARG2 (y / you
		:name (n / name
			:op1 "Robot")))

# ::id p2.03_main1_s94
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.03_main1_s95
# ::tok I see a wall with a window opening .
# ::snt I see a wall with a window opening.
(s / see-01
	:ARG0 (i / i)
	:ARG1 (w / wall
		:ARG1-of (h / have-part-91
			:ARG2 (o / opening
				:domain (w2 / window)))))

# ::id p2.09_main2_s130
# ::tok < pause > make a u turn
# ::snt <pause> make a u turn
(u / uturn-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p2.09_main2_s131
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.09_main2_s132
# ::tok turn 180
# ::snt turn 180
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:extent (a / angle-quantity
		:quant 180
		:unit (d / degree))
	:mode imperative)

# ::id p2.09_main2_s133
# ::tok I will turn around 180 degrees
# ::snt I will turn around 180 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:extent (a / around)
	:extent (a2 / angle-quantity
		:quant 180
		:unit (d / degree)))

# ::id p2.09_main2_s134
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.09_main2_s135
# ::tok < long pause >
# ::snt <long pause>
(a / amr-empty)

# ::id p2.09_main2_s136
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.09_main2_s137
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_main1_s79
# ::tok can you move several yards towards the white door
# ::snt can you move several yards towards the white door
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (d2 / door
		:ARG1-of (w / white-03))
	:extent (s / several
		:op1 (d / distance-quantity
			:quant 1
			:unit (y2 / yard)))
	:mode imperative
	:polite +)

# ::id p2.02_main1_s80
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.02_main1_s81
# ::tok I will move forward 6 feet , ok ?
# ::snt I will move forward 6 feet, ok?
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:ARG1-of (r / request-confirmation-91
		:ARG0 i
		:ARG2 (y / you))
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 6
		:unit (f2 / foot)))

# ::id p2.02_main1_s82
# ::tok uh i think six feet is too fff far
# ::snt uh i think six feet is too fff far
(t / think-01
	:ARG0 (i / i)
	:ARG1 (h / have-degree-91
		:ARG1 (d / distance-quantity
			:quant 6
			:unit (f / foot))
		:ARG2 (f2 / far)
		:ARG3 (t2 / too)))

# ::id p2.02_main1_s83
# ::tok < pause > maybe three feet
# ::snt <pause> maybe three feet
(d / distance-quantity
	:ARG1-of (p / possible-01)
	:quant 3
	:unit (f / foot))

# ::id p2.02_main1_s84
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.02_main1_s85
# ::tok move 3 feet towards shoe start door
# ::snt move 3 feet towards shoe start door
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (d2 / door
		:name (n / name
			:op1 "Shoe"
			:op2 "Start"))
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p2.02_main1_s86
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.02_main1_s87
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_main1_s88
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.03_main2_s9
# ::tok robot what do you see
# ::snt robot what do you see
(s / say-01
	:ARG0 (i / i)
	:ARG1 (s2 / see-01
		:ARG0 (y / you
			:name (n / name
				:op1 "Robot"))
		:ARG1 (a / amr-unknown))
	:ARG2 y)

# ::id p2.03_main2_s10
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.03_main2_s11
# ::tok Hmm . . .
# ::snt Hmm. . .
(h / hmm
	:mode expressive)

# ::id p2.03_main2_s12
# ::tok I 'm not sure .
# ::snt I'm not sure.
(s / sure-02
	:ARG0 (i / i)
	:polarity -)

# ::id p2.03_main2_s13
# ::tok I do n't know what all the objects are around me . < beep >
# ::snt I don't know what all the objects are around me. <beep>
(k / know-01
	:ARG0 (i / i)
	:ARG1 (o / object
		:domain (t / thing)
		:location (a / around
			:op1 i)
		:mod (a2 / all))
	:polarity -)

# ::id p2.03_main2_s14
# ::tok If you describe an object , you can help me to learn what it is . < beep >
# ::snt If you describe an object, you can help me to learn what it is. <beep>
(h / have-condition-91
	:ARG1 (p / possible-01
		:ARG1 (h2 / help-01
			:ARG0 y
			:ARG1 (l / learn-01
				:ARG0 i
				:ARG1 (t / thing
					:domain o)
				:ARG2 y)
			:ARG2 (i / i)))
	:ARG2 (d / describe-01
		:ARG0 (y / you)
		:ARG1 (o / object)))

# ::id p2.06_main2_s168
# ::tok turn thirty degrees south
# ::snt turn thirty degrees south
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (s / south)
	:extent (a / angle-quantity
		:quant 30
		:unit (d / degree))
	:mode imperative)

# ::id p2.06_main2_s169
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p2.06_main2_s170
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.06_main2_s171
# ::tok turn left 30 degrees
# ::snt turn left 30 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 30
		:unit (d / degree))
	:mode imperative)

# ::id p2.06_main2_s172
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.06_main2_s173
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.06_main2_s174
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.06_main2_s175
# ::tok done and sent
# ::snt done and sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.06_main2_s176
# ::tok < pause > is there a shovel in the room
# ::snt <pause> is there a shovel in the room
(b / be-located-at-91
	:ARG1 (s / shovel)
	:ARG2 (r / room)
	:polarity (a / amr-unknown))

# ::id p2.06_main2_s177
# ::tok done , sent
# ::snt done, sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.06_main2_s178
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.06_main2_s179
# ::tok I think you are more familiar with shovels than I am .
# ::snt I think you are more familiar with shovels than I am.
(t / think-01
	:ARG0 (i / i)
	:ARG1 (h / have-degree-91
		:ARG1 (y / you)
		:ARG2 (f / familiarize-01
			:ARG1 y
			:ARG2 (s / shovel))
		:ARG3 (m / more)
		:ARG4 i))

# ::id p2.06_main2_s180
# ::tok What do you think ? < beep >
# ::snt What do you think? <beep>
(t / think-01
	:ARG0 (y / you)
	:ARG1 (a / amr-unknown))

# ::id p2.06_main2_s181
# ::tok < pause > turn ninety degrees south east
# ::snt <pause> turn ninety degrees south east
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (s / southeast)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.06_main2_s182
# ::tok and take a picture
# ::snt and take a picture
(a / and
	:op2 (p / picture-01
		:ARG0 (y / you)
		:mode imperative))

# ::id p2.06_main2_s183
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.06_main2_s184
# ::tok turn left 90 degrees
# ::snt turn left 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.06_main2_s185
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.06_main2_s186
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.06_main2_s187
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.06_main2_s188
# ::tok done and sent
# ::snt done and sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.06_main2_s189
# ::tok done , sent
# ::snt done, sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.06_main2_s190
# ::tok do you see foreign writing
# ::snt do you see foreign writing
(s / see-01
	:ARG0 (y / you)
	:ARG1 (t / thing
		:ARG1-of (w / write-01)
		:mod (f / foreign))
	:polarity (a / amr-unknown))

# ::id p2.06_main2_s191
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.06_main2_s192
# ::tok I see objects all around me ; I need your help to decide which are important . < beep >
# ::snt I see objects all around me; I need your help to decide which are important. <beep>
(m / multi-sentence
	:snt1 (s / see-01
		:ARG0 (i / i)
		:ARG1 (o / object
			:location (a / around
				:mod (a2 / all)
				:op1 i)))
	:snt2 (n / need-01
		:ARG0 i
		:ARG1 (h / help-01
			:ARG0 (y / you)
			:ARG1 (d / decide-01
				:ARG0 i
				:ARG1 (i2 / important-01
					:ARG1 (o2 / object
						:ARG1-of (i3 / include-91
							:ARG2 o)))))))

# ::id p2.06_main2_s193
# ::tok < notification sound >
# ::snt <notification sound>
(a / amr-empty)

# ::id p2.06_main2_s194
# ::tok Would you like me to send a picture ? < beep >
# ::snt Would you like me to send a picture? <beep>
(l / like-02
	:ARG0 (y / you)
	:ARG1 (s / send-01
		:ARG0 (i / i)
		:ARG1 (p / picture)
		:ARG2 y)
	:polarity (a / amr-unknown))

# ::id p2.06_main2_s195
# ::tok no
# ::snt no
(n / no)

# ::id p2.05_main2_s132
# ::tok robot turn around
# ::snt robot turn around
(s / say-01
	:ARG0 (i / i)
	:ARG1 (t / turn-01
		:ARG0 (y / you
			:name (n / name
				:op1 "Robot"))
		:ARG1 y
		:extent (a / around)
		:mode imperative)
	:ARG2 y)

# ::id p2.05_main2_s133
# ::tok and < pause > leave this room
# ::snt and <pause> leave this room
(a / and
	:op2 (l / leave-11
		:ARG0 (y / you)
		:ARG1 (r / room
			:mod (t / this))
		:mode imperative))

# ::id p2.05_main2_s134
# ::tok can you do that
# ::snt can you do that
(p / possible-01
	:ARG1 (d / do-02
		:ARG0 (y / you)
		:ARG1 (t / that))
	:polarity (a / amr-unknown))

# ::id p2.05_main2_s135
# ::tok ok , I think I got it .
# ::snt ok, I think I got it.
(m / multi-sentence
	:snt1 (o / okay-04)
	:snt2 (t / think-01
		:ARG0 (i / i)
		:ARG1 (g / get-30
			:ARG0 i
			:ARG1 (i2 / it))))

# ::id p2.05_main2_s136
# ::tok turn 180
# ::snt turn 180
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:extent (a / angle-quantity
		:quant 180
		:unit (d / degree))
	:mode imperative)

# ::id p2.05_main2_s137
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.05_main2_s138
# ::tok Office hallway
# ::snt Office hallway
(h / hallway
	:name (n / name
		:op1 "Office"))

# ::id p2.05_main2_s139
# ::tok via . . .
# ::snt via. . .
(v / via)

# ::id p2.05_main2_s140
# ::tok Cleaning room
# ::snt Cleaning room
(r / room
	:name (n / name
		:op1 "Cleaning"))

# ::id p2.05_main2_s141
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.05_main2_s142
# ::tok < laughter > i got it wrong
# ::snt <laughter> i got it wrong
(g / get-30
	:ARG0 (i / i)
	:ARG1 (i2 / it
		:ARG2-of (w / wrong-04
			:ARG1 i)))

# ::id p2.05_main2_s143
# ::tok turn ninety degrees to your right
# ::snt turn ninety degrees to your right
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.05_main2_s144
# ::tok uh done < laughter >
# ::snt uh done <laughter>
(d / do-02
	:ARG0 (i / i))

# ::id p2.05_main2_s145
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.05_main2_s146
# ::tok and take a picture
# ::snt and take a picture
(a / and
	:op2 (p / picture-01
		:ARG0 (y / you)
		:mode imperative))

# ::id p2.05_main2_s147
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.05_main2_s148
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.05_main2_s149
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.05_main2_s150
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.05_main2_s151
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.05_main2_s152
# ::tok uh done and sent
# ::snt uh done and sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.05_main2_s153
# ::tok done , sent
# ::snt done, sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.01_main1_s256
# ::tok < pause > how far away are you from the object in front of you
# ::snt <pause> how far away are you from the object in front of you
(y / you
	:location (r / relative-position
		:op1 (o / object)
		:quant (a / amr-unknown))
	:op1-of (i / in-front-of
		:location-of o))

# ::id p2.01_main1_s257
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.01_main1_s258
# ::tok I 'm not sure .
# ::snt I'm not sure.
(s / sure-02
	:ARG0 (i / i)
	:polarity -)

# ::id p2.01_main1_s259
# ::tok . . .
# ::snt . . .
(a / amr-empty)

# ::id p2.01_main1_s260
# ::tok move forward one foot
# ::snt move forward one foot
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 1
		:unit (f2 / foot))
	:mode imperative)

# ::id p2.01_main1_s261
# ::tok I will move close to it , ok ?
# ::snt I will move close to it, ok?
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:ARG1-of (r / request-confirmation-91
		:ARG0 i
		:ARG2 (y / you))
	:ARG2 (c / close-10
		:ARG1 i
		:ARG2 (i2 / it)))

# ::id p2.01_main1_s262
# ::tok okay move close to it < laughter >
# ::snt okay move close to it <laughter>
(m / multi-sentence
	:snt1 (o / okay-01
		:ARG0 (i / i)
		:ARG1 m2)
	:snt2 (m2 / move-01
		:ARG0 (y / you)
		:ARG1 y
		:ARG2 (c / close-10
			:ARG1 y
			:ARG2 (i2 / it))
		:mode imperative))

# ::id p2.01_main1_s263
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.01_main1_s264
# ::tok move to newspaper
# ::snt move to newspaper
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (n / newspaper)
	:mode imperative)

# ::id p2.01_main1_s265
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.01_main1_s266
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.01_main1_s267
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_main2_s20
# ::tok can you take a photo
# ::snt can you take a photo
(p / photograph-01
	:ARG0 (y / you)
	:mode imperative
	:polite +)

# ::id p2.02_main2_s21
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image))

# ::id p2.02_main2_s22
# ::tok oh sent
# ::snt oh sent
(m / multi-sentence
	:snt1 (o / oh
		:mode expressive)
	:snt2 (s / send-01
		:ARG0 (i / i)))

# ::id p2.02_main2_s23
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.02_main2_s24
# ::tok how many yellow helmets do you see
# ::snt how many yellow helmets do you see
(s / see-01
	:ARG0 (y2 / you)
	:ARG1 (h / helmet
		:ARG1-of (y / yellow-02)
		:quant (a / amr-unknown)))

# ::id p2.02_main2_s25
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.02_main2_s26
# ::tok I see two yellow helmets to my left .
# ::snt I see two yellow helmets to my left.
(s / see-01
	:ARG0 (i / i)
	:ARG1 (h / helmet
		:ARG1-of (y / yellow-02)
		:ARG1-of (l / left-20
			:ARG2 i)
		:quant 2))

# ::id p2.02_main2_s27
# ::tok is there a < pause > toolbox < pause > grey toolbox in front
# ::snt is there a <pause> toolbox <pause> grey toolbox in front
(t / toolbox
	:ARG1-of (g / gray-02)
	:location (f / front)
	:polarity (a / amr-unknown))

# ::id p2.02_main2_s28
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.02_main2_s29
# ::tok I see a grey box - like object ahead and to the left .
# ::snt I see a grey box-like object ahead and to the left.
(s / see-01
	:ARG0 (i / i)
	:ARG1 (o / object
		:ARG1-of (r / resemble-01
			:ARG2 (b / box))
		:ARG1-of (g / gray-02)
		:ARG1-of (l / left-20
			:ARG2 i)
		:location (a / ahead
			:op1 i)))

# ::id p2.02_main2_s30
# ::tok Would you like me to move to take a good picture ? < beep >
# ::snt Would you like me to move to take a good picture? <beep>
(l / like-02
	:ARG0 (y / you)
	:ARG1 (m / move-01
		:ARG0 (i / i)
		:ARG1 i
		:purpose (p / picture-01
			:ARG0 i
			:ARG1-of (g / good-02)))
	:polarity (a / amr-unknown))

# ::id p2.02_main2_s31
# ::tok yes can you take a picture
# ::snt yes can you take a picture
(m / multi-sentence
	:snt1 (y / yes)
	:snt2 (p / picture-01
		:ARG0 (y2 / you)
		:mode imperative
		:polite +))

# ::id p2.02_main2_s32
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.02_main2_s33
# ::tok move to cement block
# ::snt move to cement block
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (b / block
		:consist-of (c / cement))
	:mode imperative)

# ::id p2.02_main2_s34
# ::tok do you know the objects beside it
# ::snt do you know the objects beside it
(k / know-02
	:ARG0 (y / you)
	:ARG1 (o / object
		:location (b / beside
			:op1 (i / it)))
	:polarity (a / amr-unknown))

# ::id p2.02_main2_s35
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.02_main2_s36
# ::tok can you stop
# ::snt can you stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative
	:polite +)

# ::id p2.02_main2_s37
# ::tok I could n't hear everything you said . < beep >
# ::snt I couldn't hear everything you said. <beep>
(p / possible-01
	:ARG1 (h / hear-01
		:ARG0 (i / i)
		:ARG1 (e / everything
			:ARG1-of (s / say-01
				:ARG0 (y / you))))
	:polarity -)

# ::id p2.02_main2_s38
# ::tok Can you repeat that ? < beep >
# ::snt Can you repeat that? <beep>
(r / repeat-01
	:ARG0 (y / you)
	:ARG1 (t / that)
	:mode imperative
	:polite +)

# ::id p2.02_main2_s39
# ::tok can you stop
# ::snt can you stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative
	:polite +)

# ::id p2.02_main2_s40
# ::tok uh done
# ::snt uh done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_main2_s41
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_main2_s42
# ::tok can take another photo
# ::snt can take another photo
(p / photograph-01
	:ARG0 (y / you)
	:mod (a / another)
	:mode imperative
	:polite +)

# ::id p2.02_main2_s43
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.02_main2_s44
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.02_main2_s45
# ::tok can you move back two feet
# ::snt can you move back two feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (b / back)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative
	:polite +)

# ::id p2.02_main2_s46
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p2.02_main2_s47
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.02_main2_s48
# ::tok move back 2 feet
# ::snt move back 2 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (b / back)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative)

# ::id p2.02_main2_s49
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.02_main2_s50
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.02_main2_s51
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.08_main1_s189
# ::tok go to the next doorway
# ::snt go to the next doorway
(g / go-02
	:ARG0 (y / you)
	:ARG4 (d / doorway
		:mod (n / next))
	:mode imperative)

# ::id p2.08_main1_s190
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.08_main1_s191
# ::tok I see more than one doorway . < beep >
# ::snt I see more than one doorway. <beep>
(s / see-01
	:ARG0 (i / i)
	:ARG1 (d / doorway
		:quant (m / more-than
			:op1 1)))

# ::id p2.08_main1_s192
# ::tok . . .
# ::snt . . .
(a / amr-empty)

# ::id p2.08_main1_s193
# ::tok < pause > go to the doorway to your left
# ::snt <pause> go to the doorway to your left
(g / go-02
	:ARG0 (y / you)
	:ARG4 (d / doorway
		:ARG1-of (l / left-20
			:ARG2 y))
	:mode imperative)

# ::id p2.08_main1_s194
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.08_main1_s195
# ::tok I do n't see a door on the left . < beep >
# ::snt I don't see a door on the left. <beep>
(s / see-01
	:ARG0 (i / i)
	:ARG1 (d / door
		:ARG1-of (l / left-20
			:ARG2 i))
	:polarity -)

# ::id p2.08_main1_s196
# ::tok Should I send a picture ? < beep >
# ::snt Should I send a picture? <beep>
(r / recommend-01
	:ARG1 (s / send-01
		:ARG0 (i / i)
		:ARG1 (p / picture))
	:polarity (a / amr-unknown))

# ::id p2.08_main1_s197
# ::tok send a picture
# ::snt send a picture
(s / send-01
	:ARG0 (y / you)
	:ARG1 (p / picture)
	:mode imperative)

# ::id p2.08_main1_s198
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p2.08_main1_s199
# ::tok turn left 90 degrees
# ::snt turn left 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p2.08_main1_s200
# ::tok I will turn left 90 degrees
# ::snt I will turn left 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (l / left-20
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p2.08_main1_s201
# ::tok and . . .
# ::snt and. . .
(a / and)

# ::id p2.08_main1_s202
# ::tok then . . .
# ::snt then. . .
(t / then)

# ::id p2.08_main1_s203
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.08_main1_s204
# ::tok I will send a picture
# ::snt I will send a picture
(s / send-01
	:ARG0 (i / i)
	:ARG1 (p / picture))

# ::id p2.08_main1_s205
# ::tok done and sent
# ::snt done and sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.08_main1_s206
# ::tok done , sent
# ::snt done, sent
(a / and
	:op1 (d / do-02
		:ARG0 (i / i))
	:op2 (s / send-01
		:ARG0 i))

# ::id p2.08_main1_s207
# ::tok turn around
# ::snt turn around
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:extent (a / around)
	:mode imperative)

# ::id p2.08_main1_s208
# ::tok and go to the next doorway
# ::snt and go to the next doorway
(a / and
	:op2 (g / go-02
		:ARG0 (y / you)
		:ARG4 (d / doorway
			:mod (n / next))
		:mode imperative))

# ::id p2.08_main1_s209
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.08_main1_s210
# ::tok turn 180
# ::snt turn 180
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:extent (a / angle-quantity
		:quant 180
		:unit (d / degree))
	:mode imperative)

# ::id p2.08_main1_s211
# ::tok I will turn around 180 degrees
# ::snt I will turn around 180 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:extent (a / around)
	:extent (a2 / angle-quantity
		:quant 180
		:unit (d / degree)))

# ::id p2.08_main1_s212
# ::tok but . . .
# ::snt but. . .
(c / contrast-01)

# ::id p2.08_main1_s213
# ::tok I 'm unsure which doorway you mean . < beep >
# ::snt I'm unsure which doorway you mean. <beep>
(s / sure-02
	:ARG0 (i / i)
	:ARG1 (t / thing
		:ARG2-of (m / mean-01
			:ARG0 (y / you))
		:domain (d / doorway))
	:polarity -)

# ::id p2.08_main1_s214
# ::tok Do you mean the one on the right ? < beep >
# ::snt Do you mean the one on the right? <beep>
(m / mean-01
	:ARG0 (y / you)
	:ARG2 (o / one
		:ARG1-of (r / right-04))
	:polarity (a / amr-unknown))

# ::id p2.08_main1_s215
# ::tok Do you mean the one on the left ? < beep >
# ::snt Do you mean the one on the left? <beep>
(m / mean-01
	:ARG0 (y / you)
	:ARG2 (o / one
		:ARG1-of (l / left-20))
	:polarity (a / amr-unknown))

# ::id p2.08_main1_s216
# ::tok right
# ::snt right
(r / right-04)

# ::id p2.08_main1_s217
# ::tok uh done
# ::snt uh done
(d / do-02
	:ARG0 (i / i))

# ::id p2.08_main1_s218
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p2.08_main1_s219
# ::tok move to Cleaning room - hall doorway
# ::snt move to Cleaning room - hall doorway
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (d / doorway
		:name (n / name
			:op1 "Cleaning"
			:op2 "Room"
			:op3 "Hall"))
	:mode imperative)

# ::id p2.08_main1_s220
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p2.08_main1_s221
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.08_main1_s222
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p2.08_main1_s223
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p2.08_main1_s224
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p2.08_main1_s225
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s0
# ::tok ( calibrate )
# ::snt (calibrate)
(c / calibrate-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s1
# ::tok calibrating . . .
# ::snt calibrating. . .
(c / calibrate-01
	:ARG0 (i / i))

# ::id p3.29_main1_s2
# ::tok calibrate
# ::snt calibrate
(c / calibrate-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s10
# ::tok i am ready
# ::snt i am ready
(r / ready-02
	:ARG1 (i / i))

# ::id p3.29_main1_s11
# ::tok calibration complete
# ::snt calibration complete
(c / complete-01
	:ARG1 (c2 / calibrate-01))

# ::id p3.29_main1_s13
# ::tok I 'm also ready .
# ::snt I'm also ready.
(r / ready-02
	:ARG1 (i / i)
	:mod (a / also))

# ::id p3.29_main1_s14
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s15
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s16
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s17
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s18
# ::tok go forty five degrees to the left
# ::snt go forty five degrees to the left
(g / go-02
	:ARG0 (y / you)
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 45
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s19
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s20
# ::tok turn left 45 degrees
# ::snt turn left 45 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 45
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s21
# ::tok I will turn left 45 degrees
# ::snt I will turn left 45 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (l / left-20
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 45
		:unit (d / degree)))

# ::id p3.29_main1_s22
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s23
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s24
# ::tok go straight three feet
# ::snt go straight three feet
(g / go-02
	:ARG0 (y / you)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative
	:path (t / thing
		:ARG1-of (s / straight-04)))

# ::id p3.29_main1_s25
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s26
# ::tok move forward 3 feet
# ::snt move forward 3 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s27
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i))

# ::id p3.29_main1_s28
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s29
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s30
# ::tok go straight three feet
# ::snt go straight three feet
(g / go-02
	:ARG0 (y / you)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative
	:path (t / thing
		:ARG1-of (s / straight-04)))

# ::id p3.29_main1_s31
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s32
# ::tok move forward 3 feet
# ::snt move forward 3 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s33
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i))

# ::id p3.29_main1_s34
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s35
# ::tok I moved forward 3 feet
# ::snt I moved forward 3 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f2 / foot)))

# ::id p3.29_main1_s37
# ::tok move a hundred eighty degrees to the right
# ::snt move a hundred eighty degrees to the right
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04)
	:extent (a / angle-quantity
		:quant 180
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s38
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s39
# ::tok turn right 180
# ::snt turn right 180
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 180
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s40
# ::tok I will turn right 180 degrees
# ::snt I will turn right 180 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 180
		:unit (d / degree)))

# ::id p3.29_main1_s41
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s42
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s43
# ::tok move a hundred and twenty degrees to the to the left
# ::snt move a hundred and twenty degrees to the to the left
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 120
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s44
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s45
# ::tok turn left 120 degrees
# ::snt turn left 120 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 120
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s46
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s47
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s48
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s49
# ::tok move ninety degrees to the left
# ::snt move ninety degrees to the left
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s50
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s51
# ::tok turn left 90 degrees
# ::snt turn left 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s52
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s53
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s54
# ::tok move three three feet ahead
# ::snt move three three feet ahead
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (a / ahead)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s55
# ::tok I turned left 90 degrees
# ::snt I turned left 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (l / left-20
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p3.29_main1_s56
# ::tok move forward 3 feet
# ::snt move forward 3 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s57
# ::tok I will move forward 3 feet
# ::snt I will move forward 3 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f2 / foot)))

# ::id p3.29_main1_s58
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s59
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s60
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s61
# ::tok turn ninety degrees to the right
# ::snt turn ninety degrees to the right
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s62
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s63
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s64
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s65
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s66
# ::tok move three feet forward
# ::snt move three feet forward
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s67
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s68
# ::tok move forward 3 feet
# ::snt move forward 3 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s69
# ::tok I will move forward 3 feet
# ::snt I will move forward 3 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f2 / foot)))

# ::id p3.29_main1_s70
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s71
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s72
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s73
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s74
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s75
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s76
# ::tok move ten feet forward
# ::snt move ten feet forward
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 10
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s77
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s78
# ::tok move forward 10 feet
# ::snt move forward 10 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 10
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s79
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s80
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s81
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s82
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s83
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s84
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s85
# ::tok move five feet forward
# ::snt move five feet forward
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s86
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s87
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s88
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s89
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s90
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s91
# ::tok I moved forward 5 feet
# ::snt I moved forward 5 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot)))

# ::id p3.29_main1_s92
# ::tok turn four degree turn ninety degrees right
# ::snt turn four degree turn ninety degrees right
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s93
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s94
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s95
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s96
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s97
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s98
# ::tok move five degrees five feet forward
# ::snt move five degrees five feet forward
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s99
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s100
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s101
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s102
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s103
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s104
# ::tok I moved forward 5 feet
# ::snt I moved forward 5 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot)))

# ::id p3.29_main1_s105
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s106
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s107
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s108
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s109
# ::tok turn left ninety degrees
# ::snt turn left ninety degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s110
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s111
# ::tok turn left 90 degrees
# ::snt turn left 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s112
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s113
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s114
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s115
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s116
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s117
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s118
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s119
# ::tok go straight four feet
# ::snt go straight four feet
(g / go-02
	:ARG0 (y / you)
	:extent (d / distance-quantity
		:quant 4
		:unit (f / foot))
	:mode imperative
	:path (t / thing
		:ARG1-of (s / straight-04)))

# ::id p3.29_main1_s120
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s121
# ::tok move forward 4 ft
# ::snt move forward 4 ft
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 4
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s122
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s123
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s124
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s125
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s126
# ::tok turn right ninety degrees
# ::snt turn right ninety degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s127
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s128
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s129
# ::tok I will turn right 90 degrees
# ::snt I will turn right 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p3.29_main1_s130
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s131
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s132
# ::tok go forward four four feet
# ::snt go forward four four feet
(g / go-02
	:ARG0 (y / you)
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 4
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s133
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s134
# ::tok move forward 4 ft
# ::snt move forward 4ft
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 4
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s135
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s136
# ::tok go forward four feet
# ::snt go forward four feet
(g / go-02
	:ARG0 (y / you)
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 4
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s137
# ::tok i ca n't move more than this
# ::snt i can't move more than this
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:ARG1-of (p / possible-01
		:polarity -)
	:extent (d / distance-quantity
		:ARG1-of (h / have-quant-91
			:ARG3 (m2 / more)
			:ARG4 (t / this))))

# ::id p3.29_main1_s138
# ::tok there 's two feet
# ::snt there's two feet
(d / distance-quantity
	:quant 2
	:unit (f / foot))

# ::id p3.29_main1_s139
# ::tok I did n't get all of that .
# ::snt I didn't get all of that.
(g / get-30
	:ARG0 (i / i)
	:ARG1 (t / that
		:mod (a / all))
	:polarity -)

# ::id p3.29_main1_s140
# ::tok Can you repeat that ?
# ::snt Can you repeat that?
(r / repeat-01
	:ARG0 (y / you)
	:ARG1 (t / that)
	:mode imperative
	:polite +)

# ::id p3.29_main1_s141
# ::tok go forward four feet
# ::snt go forward four feet
(g / go-02
	:ARG0 (y / you)
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 4
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s142
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s143
# ::tok I 'm not sure if I can move that far forward .
# ::snt I'm not sure if I can move that far forward.
(s / sure-02
	:ARG0 (i / i)
	:ARG1 (p / possible-01
		:ARG1 (m / move-01
			:ARG0 i
			:ARG1 i
			:direction (f / forward)
			:extent (f2 / far
				:degree (t / that))))
	:polarity -)

# ::id p3.29_main1_s144
# ::tok go forward three feet < fee >
# ::snt go forward three feet <fee>
(g / go-02
	:ARG0 (y / you)
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s145
# ::tok I will move forward as far as I can , ok ?
# ::snt I will move forward as far as I can, ok?
(m / move-01
	:ARG0 (i / i
		:ARG0-of (r / request-confirmation-91
			:ARG2 (y / you)))
	:ARG1 i
	:ARG1-of (h / have-degree-91
		:ARG2 (f2 / far)
		:ARG3 (e / equal)
		:ARG4 (d / distance-quantity
			:ARG1-of (p / possible-01)))
	:ARG1-of r
	:direction (f / forward)
	:extent f2)

# ::id p3.29_main1_s146
# ::tok okay
# ::snt okay
(o / okay-01
	:ARG0 (i / i))

# ::id p3.29_main1_s147
# ::tok move forward 3 feet
# ::snt move forward 3 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 3
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s148
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s149
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s150
# ::tok move ten degrees to the left
# ::snt move ten degrees to the left
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 10
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s151
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s152
# ::tok turn left 10 degrees
# ::snt turn left 10 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 10
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s153
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s154
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s155
# ::tok go forward two feet
# ::snt go forward two feet
(g / go-02
	:ARG0 (y / you)
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s156
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s157
# ::tok There 's an obstruction preventing me from doing that .
# ::snt There's an obstruction preventing me from doing that.
(p / prevent-01
	:ARG0 (t / thing
		:ARG0-of (o / obstruct-01))
	:ARG1 (d / do-02
		:ARG0 (i / i)
		:ARG1 (t2 / that)))

# ::id p3.29_main1_s158
# ::tok move ninety degrees to the left
# ::snt move ninety degrees to the left
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s159
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s160
# ::tok turn left 90 degrees
# ::snt turn left 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s161
# ::tok I will turn left 90 degrees
# ::snt I will turn left 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (l / left-20
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p3.29_main1_s162
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s163
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s164
# ::tok move another ten degrees to the left
# ::snt move another ten degrees to the left
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:mod (a2 / another)
		:quant 10
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s165
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s166
# ::tok turn left 10 degrees
# ::snt turn left 10 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 10
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s167
# ::tok executing . . .
# ::snt executing. . .
(e / execute-02
	:ARG0 (i / i))

# ::id p3.29_main1_s168
# ::tok move forward five feet
# ::snt move forward five feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s169
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s170
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s171
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s172
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s173
# ::tok uh i 'm gon na avoid this wall i think cause it from the picture
# ::snt uh i'm gonna avoid this wall i think cause it from the picture
(a / avoid-01
	:ARG0 (i / i)
	:ARG1 (w / wall
		:mod (t / this))
	:ARG1-of (c / cause-01
		:ARG0 (b / be-from-91
			:ARG1 w
			:ARG2 (p / picture)))
	:ARG1-of (t2 / think-01
		:ARG0 i))

# ::id p3.29_main1_s174
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s175
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s176
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s177
# ::tok move forward two feet
# ::snt move forward two feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s178
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s179
# ::tok move forward 2 feet
# ::snt move forward 2 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s180
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s181
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s182
# ::tok turn eighty degrees to the left
# ::snt turn eighty degrees to the left
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 80
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s183
# ::tok I moved forward 2 feet
# ::snt I moved forward 2 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot)))

# ::id p3.29_main1_s184
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s185
# ::tok turn left 80 degrees
# ::snt turn left 80 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (l / left-20
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 80
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s186
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s187
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s188
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s189
# ::tok go forward five feet
# ::snt go forward five feet
(g / go-02
	:ARG0 (y / you)
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s190
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s191
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s192
# ::tok I will move forward 5 feet
# ::snt I will move forward 5 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot)))

# ::id p3.29_main1_s193
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s194
# ::tok go forward two feet
# ::snt go forward two feet
(g / go-02
	:ARG0 (y / you)
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s195
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s196
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s197
# ::tok move forward 2 feet
# ::snt move forward 2 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s198
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s199
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s200
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s201
# ::tok move ninety degrees to the right
# ::snt move ninety degrees to the right
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s202
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s203
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s204
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s205
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s206
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s207
# ::tok move ninety degrees to the right
# ::snt move ninety degrees to the right
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s208
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s209
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s210
# ::tok I will turn right 90 degrees
# ::snt I will turn right 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p3.29_main1_s211
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s212
# ::tok go forward two feet
# ::snt go forward two feet
(g / go-02
	:ARG0 (y / you)
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s213
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s214
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s215
# ::tok move forward 2 feet
# ::snt move forward 2 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s216
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s217
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s218
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s219
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s220
# ::tok go ninety degrees to the right
# ::snt go ninety degrees to the right
(g / go-02
	:ARG0 (y / you)
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s221
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s222
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s223
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s224
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s225
# ::tok go straight five feet
# ::snt go straight five feet
(g / go-02
	:ARG0 (y / you)
	:ARG1-of (s / straight-04)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s226
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s227
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s228
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s229
# ::tok I will move forward 5 feet
# ::snt I will move forward 5 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot)))

# ::id p3.29_main1_s230
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s231
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s232
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s233
# ::tok move ninety degrees to the right
# ::snt move ninety degrees to the right
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s234
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s235
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s236
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s237
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s238
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s239
# ::tok I turned right 90 degrees
# ::snt I turned right 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p3.29_main1_s240
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s241
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s242
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s243
# ::tok move eight feet straight
# ::snt move eight feet straight
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:extent (d / distance-quantity
		:quant 8
		:unit (f / foot))
	:mode imperative
	:path (t / thing
		:ARG1-of (s / straight-04)))

# ::id p3.29_main1_s244
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s245
# ::tok move forward 8 ft
# ::snt move forward 8ft
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 8
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s246
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s247
# ::tok take a picture
# ::snt take a picture
(p / picture-01
	:ARG0 (y / you)
	:mode imperative)

# ::id p3.29_main1_s248
# ::tok send image
# ::snt send image
(s / send-01
	:ARG0 (y / you)
	:ARG1 (i / image)
	:mode imperative)

# ::id p3.29_main1_s249
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s250
# ::tok sent
# ::snt sent
(s / send-01
	:ARG0 (i / i))

# ::id p3.29_main1_s251
# ::tok move five feet closer
# ::snt move five feet closer
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (c / close-10
		:ARG1 y
		:ARG2-of (h / have-degree-91
			:ARG1 y
			:ARG3 (m2 / more)))
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s252
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s253
# ::tok meet move five feet forward
# ::snt meet move five feet forward
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s254
# ::tok I will move forward 5 feet
# ::snt I will move forward 5 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot)))

# ::id p3.29_main1_s255
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s256
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s257
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s258
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s259
# ::tok move forty five degrees to the right
# ::snt move forty five degrees to the right
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 45
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s260
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s261
# ::tok turn right 45 degrees
# ::snt turn right 45 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 45
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s262
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s263
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s264
# ::tok I turned right 45 degrees
# ::snt I turned right 45 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 45
		:unit (d / degree)))

# ::id p3.29_main1_s265
# ::tok move five feet closer
# ::snt move five feet closer
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:ARG2 (c / close-10
		:ARG1 y
		:ARG2-of (h / have-degree-91
			:ARG1 y
			:ARG3 (m2 / more)))
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s266
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s267
# ::tok move forward 5 feet
# ::snt move forward 5 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s268
# ::tok I will move forward 5 feet
# ::snt I will move forward 5 feet
(m / move-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 5
		:unit (f / foot)))

# ::id p3.29_main1_s269
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s270
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s271
# ::tok move two feet forward
# ::snt move two feet forward
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s272
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s273
# ::tok move forward 2 feet
# ::snt move forward 2 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f2 / forward)
	:extent (d / distance-quantity
		:quant 2
		:unit (f / foot))
	:mode imperative)

# ::id p3.29_main1_s274
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s275
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s276
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s277
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s278
# ::tok turn ninety degrees to the right
# ::snt turn ninety degrees to the right
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s279
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s280
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s281
# ::tok I will turn right 90 degrees
# ::snt I will turn right 90 degrees
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i
	:direction (r / right-04
		:ARG2 i)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree)))

# ::id p3.29_main1_s282
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s283
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s284
# ::tok turn ninety degrees to the right
# ::snt turn ninety degrees to the right
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s285
# ::tok ok
# ::snt ok
(o / okay-04)

# ::id p3.29_main1_s286
# ::tok turn right 90 degrees
# ::snt turn right 90 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 90
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s287
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s288
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s289
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s290
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s291
# ::tok move forward ten feet
# ::snt move forward ten feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 10
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s292
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s293
# ::tok move forward 10 feet
# ::snt move forward 10 feet
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (f / forward)
	:extent (d / distance-quantity
		:quant 10
		:unit (f2 / foot))
	:mode imperative)

# ::id p3.29_main1_s294
# ::tok moving . . .
# ::snt moving. . .
(m / move-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s295
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s296
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s297
# ::tok stop
# ::snt stop
(s / stop-01
	:ARG0 (y / you)
	:ARG1 y
	:mode imperative)

# ::id p3.29_main1_s298
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s299
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s300
# ::tok move right twenty five degrees
# ::snt move right twenty five degrees
(m / move-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 25
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s301
# ::tok processing . . .
# ::snt processing. . .
(p / process-01
	:ARG0 (i / i))

# ::id p3.29_main1_s302
# ::tok turn right 25 degrees
# ::snt turn right 25 degrees
(t / turn-01
	:ARG0 (y / you)
	:ARG1 y
	:direction (r / right-04
		:ARG2 y)
	:extent (a / angle-quantity
		:quant 25
		:unit (d / degree))
	:mode imperative)

# ::id p3.29_main1_s303
# ::tok turning . . .
# ::snt turning. . .
(t / turn-01
	:ARG0 (i / i)
	:ARG1 i)

# ::id p3.29_main1_s304
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s305
# ::tok done
# ::snt done
(d / do-02
	:ARG0 (i / i))

# ::id p3.29_main1_s306
# ::tok okay
# ::snt okay
(o / okay-04)

# ::id p3.29_main1_s307
# ::tok alright so how many doorways were there
# ::snt alright so how many doorways were there
(m / multi-sentence
	:snt1 (a / all-right)
	:snt2 (d / doorway
		:quant (a2 / amr-unknown)))

# ::id p3.29_main1_s308
# ::tok two
# ::snt two
(h / have-quant-91
	:ARG2 2)

# ::id p3.29_main1_s309
# ::tok i did n't see any
# ::snt i didn't see any
(s / see-01
	:ARG0 (i / i)
	:ARG1 (a / any)
	:polarity -)

# ::id p3.29_main1_s310
# ::tok uh there were clothes hanging
# ::snt uh there were clothes hanging
(h / hang-01
	:ARG1 (c / clothes))

# ::id p3.29_main1_s311
# ::tok actually i did n't say clothes hanging outside of a
# ::snt actually i didn't say clothes hanging outside of a
(s / say-01
	:ARG0 (i / i)
	:ARG1 (h / hang-01
		:ARG1 (c / clothes)
		:location (o / outside))
	:polarity -)

# ::id p3.29_main1_s312
# ::tok Good job !
# ::snt Good job!
(g / good-02
	:ARG1 (j / job))

# ::id p3.29_main1_s313
# ::tok end task
# ::snt end task
(e / end-01
	:ARG0 (y / you)
	:ARG1 (t / task)
	:mode imperative)
